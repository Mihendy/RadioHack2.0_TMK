// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251007075254_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("backend.Models.Nomenclature", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<double>("Diameter")
                        .HasColumnType("double precision");

                    b.Property<string>("FormOfLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gost")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDCat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDTypeNew")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Koef")
                        .HasColumnType("double precision");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PipeWallThickness")
                        .HasColumnType("double precision");

                    b.Property<string>("ProductionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("SteelGrade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("IDType");

                    b.ToTable("Nomenclatures");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("backend.Models.OrderItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NomenclatureID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uuid");

                    b.Property<decimal>("QuantityInMeters")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityInTons")
                        .HasColumnType("numeric");

                    b.Property<string>("StockID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NomenclatureID");

                    b.HasIndex("OrderID");

                    b.HasIndex("StockID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("backend.Models.PipeType", b =>
                {
                    b.Property<string>("IDType")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDType");

                    b.ToTable("PipeTypes");
                });

            modelBuilder.Entity("backend.Models.Price", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("IDStock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("NDS")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceLimitM1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceLimitM2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceLimitT1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceLimitT2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceM1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceM2")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceT")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceT1")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PriceT2")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("IDStock");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("backend.Models.Remnant", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<decimal>("AvgTubeLength")
                        .HasColumnType("numeric");

                    b.Property<decimal>("AvgTubeWeight")
                        .HasColumnType("numeric");

                    b.Property<string>("IDStock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InStockM")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InStockT")
                        .HasColumnType("numeric");

                    b.HasKey("ID");

                    b.HasIndex("IDStock");

                    b.ToTable("Remnants");
                });

            modelBuilder.Entity("backend.Models.Stock", b =>
                {
                    b.Property<string>("IDStock")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "Stock");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IDStock");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("backend.Models.Nomenclature", b =>
                {
                    b.HasOne("backend.Models.PipeType", "PipeType")
                        .WithMany("Nomenclatures")
                        .HasForeignKey("IDType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PipeType");
                });

            modelBuilder.Entity("backend.Models.OrderItem", b =>
                {
                    b.HasOne("backend.Models.Nomenclature", "Nomenclature")
                        .WithMany()
                        .HasForeignKey("NomenclatureID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Stock", "Stock")
                        .WithMany()
                        .HasForeignKey("StockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Order");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("backend.Models.Price", b =>
                {
                    b.HasOne("backend.Models.Nomenclature", "Nomenclature")
                        .WithMany("Prices")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Stock", "Stock")
                        .WithMany("Prices")
                        .HasForeignKey("IDStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("backend.Models.Remnant", b =>
                {
                    b.HasOne("backend.Models.Nomenclature", "Nomenclature")
                        .WithMany("Remnants")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Stock", "Stock")
                        .WithMany("Remnants")
                        .HasForeignKey("IDStock")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nomenclature");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("backend.Models.Nomenclature", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Remnants");
                });

            modelBuilder.Entity("backend.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("backend.Models.PipeType", b =>
                {
                    b.Navigation("Nomenclatures");
                });

            modelBuilder.Entity("backend.Models.Stock", b =>
                {
                    b.Navigation("Prices");

                    b.Navigation("Remnants");
                });
#pragma warning restore 612, 618
        }
    }
}
